-- File auto generated by servant-purescript! --
module PureFlowy.Api.MakeRequests where

import Prelude

import Control.Monad.Aff.Class (class MonadAff, liftAff)
import Control.Monad.Error.Class (class MonadError)
import Control.Monad.Reader.Class (ask, class MonadReader)
import Data.Argonaut.Generic.Aeson (decodeJson, encodeJson)
import Data.Argonaut.Printer (printJson)
import Data.Maybe (Maybe(..))
import Data.Nullable (Nullable(), toNullable)
import Data.Tuple (Tuple(..))
import Global (encodeURIComponent)
import Network.HTTP.Affjax (AJAX)
import Prelude (Unit)
import Prim (Array, Int, String)
import PureFlowy.Api (SPParams_(..))
import PureFlowy.Api.Todos (Todo)
import Servant.PureScript.Affjax (AjaxError(..), affjax, defaultRequest)
import Servant.PureScript.Settings (SPSettings_(..), gDefaultToURLPiece)
import Servant.PureScript.Util (encodeHeader, encodeListQuery, encodeQueryItem, encodeURLPiece, getResult)
import Servant.Subscriber (ToUserType)
import Servant.Subscriber.Request (HttpRequest(..))
import Servant.Subscriber.Subscriptions (Subscriptions, makeSubscriptions)
import Servant.Subscriber.Types (Path(..))
import Servant.Subscriber.Util (TypedToUser, subGenFlagQuery, subGenListQuery, subGenNormalQuery, toUserType)

getTodos :: forall m. MonadReader (SPSettings_ SPParams_) m => m HttpRequest
getTodos = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["todos"]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

getTodosById :: forall m. MonadReader (SPSettings_ SPParams_) m => Int
                -> m HttpRequest
getTodosById id = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "GET"
  let reqPath = Path ["todos" , gDefaultToURLPiece id]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

postTodos :: forall m. MonadReader (SPSettings_ SPParams_) m => Todo
             -> m HttpRequest
postTodos reqBody = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "POST"
  let reqPath = Path ["todos"]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: printJson <<< encodeJson $ reqBody
                }
  pure spReq

deleteTodosById :: forall m. MonadReader (SPSettings_ SPParams_) m => Int
                   -> m HttpRequest
deleteTodosById id = do
  spOpts_' <- ask
  let spOpts_ = case spOpts_' of SPSettings_ o -> o
  let spParams_ = case spOpts_.params of SPParams_ ps_ -> ps_
  let baseURL = spParams_.baseURL
  let httpMethod = "DELETE"
  let reqPath = Path ["todos" , gDefaultToURLPiece id]
  let reqHeaders =
        []
  let reqQuery =
        []
  let spReq = HttpRequest
                { httpMethod: httpMethod
                , httpPath: reqPath
                , httpHeaders: reqHeaders
                , httpQuery: reqQuery
                , httpBody: ""
                }
  pure spReq

